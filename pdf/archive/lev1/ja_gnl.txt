必須パート

関数名: get_next_line

プロトタイプ:
char *get_next_line(int fd);

提出するファイル:
get_next_line.c, get_next_line_utils.c, get_next_line.h

パラメータ:
fd: 読み込むファイルディスクリプタ

返り値:
 読み込まれた行（正常な動作時）
 NULL: 読むものがもうない場合、またはエラーが発生した場合

使用可能な外部関数:
read, malloc, free

説明:
ファイルディスクリプタから1行を読み取り、それを返す関数を作成します。

・get_next_line() 関数を繰り返し呼び出すと（例：ループを使用して）、ファイルディスクリプタが指すテキストファイルを1行ずつ読み込むことができるようにします。
・関数は読み取った行を返す必要があります。
読むものがない場合、またはエラーが発生した場合、NULL を返さなければなりません。
・ファイルを読み取る場合と標準入力から読み取る場合の両方で、関数が期待通りに動作することを確認してください。
・戻り値の行には、改行文字 \n が含まれている必要があります（ファイルの終わりに達し、改行文字で終わらない場合を除く）。
・ヘッダーファイル get_next_line.h には、get_next_line() 関数のプロトタイプを含める必要があります。
    補助関数はすべて get_next_line_utils.c に追加してください。
ヒント:
「静的変数」が何かを知っていると良いスタートになります。

指示に従って行う設定
    コンパイルオプション
    get_next_line() ではファイルを読み込む必要があるため、コンパイラの呼び出しに次のオプションを追加します： -D BUFFER_SIZE=n
    これにより read() 関数のバッファサイズが定義されます。バッファサイズはピア評価者やMoulinetteにより変更され、コードがテストされます。 プロジェクトは通常のフラグに加えて、-D BUFFER_SIZE フラグがあってもなくてもコンパイルできる必要があります。デフォルトのバッファサイズは任意で設定できます。
        例：バッファサイズが42の場合

        bash

        cc -Wall -Wextra -Werror -D BUFFER_SIZE=42 <files>.c

    未定義動作
    get_next_line() は以下の場合、未定義動作と見なされます：
        ファイルディスクリプタが指すファイルが、read() がファイルの終わりに到達する前に前回の呼び出しから変更された場合。
        バイナリファイルを読み込んでいる場合。必要であれば、バイナリファイルを扱うための論理的な方法を実装しても構いません。

    BUFFER_SIZE の範囲
    BUFFER_SIZE の値が 9999 や 1、10000000 のように異なる場合でも、関数が動作することを確認してください。なぜそれが可能かも理解しておきましょう。

    効率的な読み込み
    get_next_line() が呼び出されるたびに、可能な限り少ない量で読み込みを行い、新しい行に到達した時点で現在の行を返す必要があります。ファイル全体を最初に読み込んでから各行を処理する方法は禁止です。

禁止事項

    libft の使用は禁止されています。
    lseek() 関数の使用は禁止されています。
    グローバル変数の使用は禁止されています。

ボーナス要件:

    静的変数を1つだけ使用して get_next_line() を作成する。
    複数のファイルディスクリプタを同時に管理できるように get_next_line() を実装する。
        例えば、ファイルディスクリプタ3、4、5から読み取れる場合、異なるファイルディスクリプタごとに get_next_line() を呼び出しても、各ディスクリプタの読み取り位置が保持され、別のディスクリプタからの行が返されないようにします。
        つまり、get_next_line() を呼び出してfd 3から読み取り、その後fd 4、次にfd 5、再度fd 3という順に読み取れるようにする必要があります。

提出ファイル名（ボーナス用ファイル）: 必須パートのファイルに加え、以下の3つのファイルを提出してください。

    get_next_line_bonus.c
    get_next_line_bonus.h
    get_next_line_utils_bonus.c
